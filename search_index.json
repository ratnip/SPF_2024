[["index.html", "Let’s program in R (“Statistical Programming Fundamentals” course book) Foreword", " Let’s program in R Damir Pintar 2024-09-29 (“Statistical Programming Fundamentals” course book) ** NOTE: During the current academic year, the “Statistical Programming Fundamentals” is revised chapter by chapter. After the subject is New chapters will be dynamically added to this HTML document. If you need to have access to all the materials, contact the author of the tutorial at damir.pintar@fer.hr** Foreword This tutorial is based on interactive lessons used in the “Statistical Programming Fundamentals” at the Faculty of Electrical Engineering and Computing at the University of Zagreb. But the topics discussed here are not only useful to the students of the mentioned faculty - knowledge of the language R will be good both in academia and in the business world. Although R is known as a “programming language made up of statisticians, for statisticians” and is most often associated with the field of data science within which it is used for complex statistical analysis and data mining, it can be very useful for tasks related to the management of smaller or larger data at tasks that are not necessarily strictly oriented to advanced analytics. Namely, popular graphical tools with their interactive tabular presentation are very intuitive and excellent for simpler tasks, but as the need for more complex tasks appears, they quickly lose their efficiency and simplicity; on the other hand, the interactive program approach offered by R is initially somewhat more demanding but long-term highly cost-effective because complex tasks can be dealt with in an efficient, consistent and insightful way. For this reason, in the business world there is a clear shifting trend from classic GUI office tools to platforms with better support for more complex calculations and the creation of attractive visualizations. This is evidenced by a strong increase in the popularity of R language and other platforms with similar approach to data analysis. The aforementioned popularity of R language results in an increased need for learning resources, which are not currently very much present in Croatia. This coursebook will try to make learning R as easy and interesting as possible through its “learning through examples” approach. Emphasis will be placed primarily on mastering R as a programming language. For this reason, the initial chapters will focus on “programmatical aspects”, followed by a review of available tools presumed to be useful for the widest set of readers - tools for data gathering, extracting useful information, and visualizations. Since R is a domain-oriented language, R’s role in its support for statistical analysis will be reviewed followed byexamining selected machine learning methods and their applications. Although there will be enough information to put all the presented methods into context, the idea of this textbook is not to teach readers statistics nor deeply enter the field of machine learning - the intention of the author is to intrigue readers to continue exploring this interesting area, adequately armed with platform knowledge that will enable all new knowledge is immediately practically applied in further research. "],["introduction.html", "1 Introduction 1.1 What is R? 1.2 Installing Software Support 1.3 Overview of the development interface RStudio 1.4 How to use this coursebook?", " 1 Introduction 1.1 What is R? 1.1.1 General facts about R Programming language R came from the programming language S, developed for the needs of Bell Telephone Laboratory owned by AT &amp; T corporation. It was designed as an internal statistical analysis tool. The basic philosophy of the S language (inherited by the programming language R) was domain orientation - ie facilitating work with data analysts without the need to adapt conventions to traditional programming languages. Language S gained significant popularity in business analysts and statisticians within the 80s and 90s, but is now only available through a commercial variant called S-PLUS. The programming language R was created at the University of Auckland (NZ) and is released under the GNU Open Code Code. The standard distribution of the R programming language consists of: “core” R, with basic functions and so called “core” base package that provides basic functionality a collection of additional packages (“base” - base and “recommended” - recommended) for data management, visualization and statistical analysis We must not ignore the excellent integration of R with a rich repository called CRAN (Comprehensive R Archive Network) that enables fast and easy installation of any packet from that repository, after which it becomes part of the local R installation. Since the R community is extremely productive when it comes to the development of new packages, often after the introduction of new experimental methods and algorithms, CRAN quickly offers packages that implement them. Also, strong and continuous enthusiasm of the R community for the enhancement of existing R elements alleviates or eliminates a large number of various deficiencies of the base language. R as a language can often be seen as a DIY project of sorts where, after getting acquainted with the supplied “factory” components (in this case basic functions and packages), the user begins to adapt his development environment by choosing a package that exactly matches their needs and preferences. Creativity and flexibility in using R is considered to be of great advantage, even though it may result in a certain informality and liberal approach to programming. This is occasionally not favoured by users from a more strict and formal programming background, used to having a clear set of guidelines and rules to be followed. Despite the exceptionally high acceptance of the R language for data analysis and the variety of options offered to the user, it is necessary to be aware of some of its limitations: R intensely uses RAM which has been considered a serious restriction for a long time. With the increase of the memory capacity in modern hardware systems, as well as the rise of processing engines which can integrate with R and relieve it of the intense memory requirements when it comes to large datasets, this limitation is much less important today. Still, the fact remains that R can quickly hog the available RAM of your machine, though it is often the result of the neglect or ignorance of a developer who has not adopted the “R” approach when it comes to programming, opting to leverage patterns borrowed from other programming languages which result in suboptimal R code. R is quite unconventional so the learning curve is initially steeper, especially for programmers accustomed to standard conventions of other programming languages. On the other hand, if viewed long-term, programming in R eventually becomes very quite simple and user-friendly since most of the complex tasks are abstracted into high-level functions that transparently perform low-level operative tasks. It is often said that R is more focused towards the goal we want to achieve and cares less about the exact way to reach it. R is not a “fast” language; although it is a language that is expected to work over large data sets, R is not optimized for performance speed or even for parallelism; although there is a great deal of effort to implement virtually all key routines in C which prevents significant slowdowns, and there are a number of packages that offer support for multithreading, the fact remains that R is not designed to have its scripts get executed as quickly as possible; If speed is a priority, it is often necessary to look for alternative solutions - which is why it is often said that R is primarily a research language, not a production language. R is primarily intended for interactive work, i.e. performing a series of machine instructions that are dynamically executed with the help of a program console. This is tailored to the standard process of data analysis where the analyst can download data, clean it, transform, develop models, test, etc. while getting continuous feedback from a computer, providing the opportunity to dynamically adapt the analysis process. This does not mean that programming language can not be programmed in a classical “procedural” way by developing algorithms encapsulated in functions that automatically perform their tasks after being called, however where R truly shines is while performing interactive tasks. This principle is also reflected when it comes to learning R; it’s a programming language which is much easier to learn through the interactive approach of performing specific, goal-oriented tasks, experimenting with data sets, trying out data exploration methods, and so on, rather than using a “classic” approach by designing scripts that implement some low-level programming jobs. 1.1.2 R alternatives Programming Language R is a popular but not the only solution for interactive data analysis and statistical programming. Below we will give a brief overview of some of the more popular technologies and solutions used today for this purpose, with a brief comparison and a review of the advantages and disadvantages compared to language R. SAS and SPSS - SAS (Statistical Analysis System, developed by SAS Institute) and SPSS (Software Package for Statistical Analysis, developed by IBM) are two different software packages that we put under the same paragraph primarily because they are commercial tools, ie tools that require full payment for their full functionality. Similarly, SAS and SPSS are relatively easy to learn and their functionality is largely based on carefully designed user interfaces. These tools emphasize efficiency and are an excellent option for large companies looking for a consistent, robust solution for their analytics, not bothered by the commercial nature of such solutions. Weka and Orange - Weka (Waikato Environment for Knowledge Analysis, developed by Waikato University in New Zealand) and Orange* (deep data analysis software developed at the University of Ljubljana) are free software for exploratory data analysis and data mining that base their functionality on relatively simple graphing interfaces and visual programming approach. These solutions are very good for users who are not too demanding in terms of the flexibility and complexity of their analysis because they allow the implementation of defined steps in the analysis process in a very accessible and clear way. This does not mean that these tools can not do more complex analysis, but they are still more suited to analyses through the predefined functionality of the provided graphical interface. Python (Numpy / Pandas / Scikit) - in the last couple of years, Python is the most serious competitor of language R, primarily because Python is a very popular programming language with a very similar process approach to data analysis compared to one used by language R. The discussion of which language to choose is very common in the field of data science, usually without a clear final conclusion. The actual differences are not as big as those discussions may make it seem - while R is strongly domain-oriented and emphasis is placed on ease of use with a wide range of available overlapping packages to enable the user to choose the one that best suits him, Python emphasizes the rigid formal structure and principle “for one job one way of doing”. Therefore, it could be said that R is somewhat more suitable for “data research” while Python’s advantage is easier development and integration of analytical modules in a production environment, especially if said environment is already implemented in Python. But with the strong development of both languages and the mutual overlapping of functionality, this distinction becomes less relevant - it is no longer a problem to integrate R scripts into existing systems regardless of the platform they are running on, and the Python community is developing its versions of popular packages from R that faithfully emulate their functionality. Ultimately, it can be said that the initial choice between these two alternatives is not so important - the approach they use is so similar and the functionality sharing is so pronounced that learned concepts are easily transferable between both languages. It also must be said that the RStudio environment allows for mixing Python and R code in a single report, further closing the divide between these languages. Rapidminer - this is a cloud-based data science software platform that provides an integrated environment for data preparation, machine learning, deep learning, text mining, and predictive analytics. It is used for business and commercial applications as well as for research, education, training, rapid prototyping, and application development and supports all steps of the machine learning process including data preparation, results visualization, model validation and optimization. Rapidminer is primarily template-based, however it is possible to write extensions for it using R or Python. 1.2 Installing Software Support Installing the R language support software is pretty simple, especially if the recommended development interface RStudio is used as a platform. This is not the only option - one of the popular alternatives is the multilingual platform Jupyter Notebook which offers its own R support. Readers are encouraged to explore all available options and choose the final selection of the interface that personally matches their needs best; however this coursebook strongly recommends choosing RStudio mainly because of a clear, user-friendly and functionality-rich interface, easy installation and a very rich support for a variety of functionalities - from installing new packages, easy retrieval of documentation, creating visualizations and publishing reports, to integrating with other data science-related software. Therefore the rest of the coursebook will assume that readers are using the RStudio IDE. To successfully set up R software, you need to install the following: R language distribution RStudio integrated development environment It is recommended to use the latest available versions. At the time of writing this book, they are R 4.0 and RStudio 1.3. If these versions differ from those on your computer, there will probably be no problem if the version numbers are higher than the above; otherwise, their upgrade is recommended. The procedure for installing this software on the operating system Microsoft Windows will be described below. If you are working on some other operating system, such as a Linux distribution or Mac OS, the procedure is somewhat different, but still not too complex - it’s enough to do a web search focused on installing R and RStudio on a particular OS and follow further instructions. To find the software mentioned in the search engine, type the following terms: download R download RStudio In both cases, you will get links to the executable files that you have to run to install the software on your computer. In the case of R, this can be a file R-4.2.2-win.exe (exact numbers may differ). In the interface RStudio you can see more options - choose a free “desktop” version. Commercial versions have some additional functionalities that are mostly oriented to use in professional multi-user environments and are not essential to normal work. You can run the executable files and let the wizard install all the necessary components on your computer. It is recommended to accept all of the default installation options except for the choice of the installation folder - instead of the subfolder Program Files “it is better to install R directly in the root folder (eg”C:\\R\\R-4.2.2”), if possible. This way, it will be easier to check the currently installed version and potentially update it later. For the same reason, it is recommended that RStudio be installed in the folder “C:\\R\\RStudio”. If you do not have the option or you do not want to choose these folders, you can use others or leave the default options - this choice should not ultimately affect the further work. After installing RStudio it is highly recommended you create a separate subfolder where you will be doing most of your R related work (for example, folder “C:\\R\\projects”). After launching RStudio, the application should look similar to the following image: Figure 1.1: RStudio interface layout If there are any problems, make sure that you have completed all of the installation steps listed above. Below we will deal with the details of the interface shown. Before continuing, you might consider creating a new “project” (File -&gt; New Project -&gt; New Directory) and create a project called “IntroToR” in the projects folder mentioned above. You can then later put all the resources related to this course in this project folder. When you want to open RStudio and continue working on tasks from this course, it will be enough to double-click the IntroToR.Rproj file in the above subfolder, or choose the “IntroToR” project in the upper right corner of the screen. 1.3 Overview of the development interface RStudio Let’s look at the interface RStudio. We see it is being divided into three windows - the left part is the “work area” with the programming console, waiting for us to enter instructions. On the right, there are auxiliary windows that show different things, depending on the selected tab; In the upper right hand corner, we can see, among other things, variables in our current working environment (which is initially empty). We can also choose to see command history, control connections to other data storage and analysis software etc.. The bottom part serves to display documentation, file structures, installed packages, visualizations, etc. 1.3.1 Interactive console Let’s go back to the left part of the interface, the “interactive console”. R, by its nature, is an “interpreter language” in the sense that the programming console expects from the user to enter commands which are then immediately interpreted and executed. Though it is possible to create larger scripts that are then executed “all at once”, working with the R language often boils down to using command-by-command principle. This is precisely why we are talking about “data analysis via interactive programming” - the analyst is “programming” by entering commands and can at any time study the obtained results, deciding on further steps. Let’s see how the interactive console works. With the help of a keyboard, you can type a simple math expression - eg 3 + 2 - and press the ENTER key. We will see that R will immediately deliver the result - if we want, we can easily use it as a calculator! For mathematical expressions that do not have predefined operator symbols we need to use functions. For example, a square root can be calculated using the sqrt () function. Let’s try typing sqrt(10) in the console and pressing ENTER. R again shows the result immediately. At this point, the screen should look like the next picture. Figure 1.2: R as a calculator One of the problems of using R this way is the messy mixing of commands and results, not allowing us an easy high-level overview of the sequence of commands we were performing. Furthermore, if for some reason the command that we execute results in an error (and we then keep trying to correct it by entering the proper command), the console soon becomes cluttered with error reports. This is why analysts often prefer using “R scripts” that allows for entering commands in a separate place before sending them to the console, visually distinguishing the procedure we want to execute with the obtained results gained after the planned instructions are executed. 1.3.2 Writing R scripts In the toolbar, select File -&gt; New File -&gt; R Script (or press the CTRL + SHIFT + N key combination). We see that the “working area” on the left becomes divided into two parts. The upper part represents the space for our “script” - actually the series of commands we want to execute - while the interactive console now occupies the lower part of the work surface. If we want, we can tweak the size of these (and other windows) by moving the bordering bars between them. Also, there’s an easy way of switching the focus between the two, through the usage of CTRL + 1 and CTRL + 2 key combinations. Try to write two simple commands in the scripting window - the first one should be print(\"hello!\") And underneath it a simple mathematical expression 3 + 4. Return the cursor to the first line and press the CTRL + ENTER key combination. If we have correctly followed these steps, the command at the cursor site will automatically be copied to the interactive console and executed. The cursor will now be the next command that you can do with CTRL + ENTER. The screen should now look similar to the next image. Figure 1.3: R script This is one of the common ways of working in RStudio- first we create some programming instructions in the script space, after which we send them to the console. If something is wrong with the command, we can easily modify it and perform it again. If you want to execute a block of commands, you can select them by clicking and dragging and then pressing the CTRL + ENTER key. Scripts can also contain comments (starting with the # character that R interprets as “ignore this line”). Finally, we can store our scripts in a file - by convention, R scripts have a simple extension R, for example myScript.R. However, we can go one step further. Despite the fact that the R scripts are quite adequate for comfortable work in the R language, there is an additional technology that gives us even more flexibility in working with the R - R Markdown. 1.3.3 R Markdown Writing R scripts is very similar to the classic concept of “programming” - we write commands that are (usually) executed sequentially, and optionally we add comments for the purpose of the documentation. However, data analysis process commonly involves dissemination of results via data science reports, either for the analysts themselves or to the intended audience. RStudio interface supports a technology that provides an effective combination of programming and structured documentation using the principle of “interactive notebooks”. Interactive notebooks allow the user to combine formatted text (optionally with formulas and figures) with executable code, and text formatting, and then insert executable code, ending up with a format resembling a notebook. For this RStudio uses the R Markdown technology, as well as its slightly updated cousin, R Notebook. Since the differences between these two are relatively superficial, we will focus on the slightly simpler one R Markdown. This technology is easiest to demonstrate via example - in the toolbar, select File -&gt; New File -&gt; R Markdown ... and in the next window choose an arbitrary title (eg \"Testing\"). You can optionally edit the metadata, such as add the author’s name, and finally choose one of the options for final form of report (HTML is recommended due to its lowest dependency on additional software). Unlike the R script, which will initially appear empty, when creating an RMD document RStudio will create a new pre-filled document. This is done in this way for the simple reason that the user gets an easily modifiable template with all the basic elements included as a reminder. We will delete most of this template for our needs - so feel free to remove everything after the initial header, i.e. below the second ---. Then, we can write any text below. We can also experiment with headers which start with #, ##, ### characters - these are NOT “R comments”, since we are now not programming, we are writing formatted text. By using * and ** characters in front and back of the words we can make letters become bold and italicized, respectively. Everything mentioned so far in this paragraph is pure “markdown”, which basically means “plain text with added formatting information that can be converted into formatted text with the help of additional tools, if desired”. When we want to incorporate executable code into our “report”, we need to create so-called “code chunks”. This can be done by selecting Insert -&gt; R on the toolbar or using the CTRL + ALT + I combination of keys. Notice that the chunk begins and ends with a specially selected string of characters - three so called “backticks” (they look like simple apostrophes, but are angled towards the left). Likewise, the beginning of the chunk contains description of certain parameters in the opening brackets, which can affect the way RStudio is processing this “code chunk”, most notably by having us state which programming language we will use. In this coursebook, we will almost exclusively use the language R, although other options are available if they had been previously installed on the platform running RStudio. The code chunk behaves the same as the standard R script - we can enter commands and execute them. The difference is just that the results can be seen immediately in the R Markdown document itself (in addition to them showing up in the console). If this is not something that we want, we can turn this functionality off (click on the gear in the toolbar and select Chunk output in console), however we usually prefer to have the results right below the code that created them, notebook-style. If we follow the instructions, the screen may look similar to the following image: Figure 1.4: R Markdown document We can now try to create a “report” from the current document. First, we must save it under a particular name (eg Testing.rmd), and then we can click on the Knit button to convert the document from pure text to an HTML file. (Note - if our platform is missing some packages, we will see that in the warning toolbar which will show up - we just need to pick the option “Install” and wait until RStudio downloads the required packages from the CRAN repository) R Markdown documents are much more powerful than it may seem judging by the elements that have been presented so far. Chunks can have plenty of different parameters which influence their behaviour. The output format can be PDF, DOCX as well as other forms such as presentation slides, books intended for mobile devices, interactive web applications etc. The coursebook you are reading is actually nothing more than a series of RMD files converted into the appropriate form you are currently using. As we will explain in the next chapter, RMD files are also the main way for you to use this coursebook effectively and try out the examples and tasks that follow. The universality and flexibility of technology R Markdown is exceptionally great, and is very well accepted by the R community. 1.4 How to use this coursebook? The basic idea of this coursebook is “learning through application”. Therefore, the lessons below will not focus on merely showing and talking about new concepts, but rather encouraging the reader to learn out each new concept by solving a series of easy or intermediate tasks. Each chapter that follows has an accompanying “workbook”. Simply put, it is an RMD file that contains all the examples from the lecture, accompanied by a concise text for easier reference to the concepts being dealt with. The basic idea is that the reader reads the coursebook and solves the workbook in parallel, looking at the task solution only after it is solved within the programming interface. Some exercises will be trivial, require simply removing the # sign (meaning “comment”) from the start of the command and executing it. In spite of the trivial approach, in this way, however, the reader is encouraged to independently test the command rather than just look at its result. Other exercises will be a bit more involved. Each exercise will also have a solution underneath (which will be hidden if using the interactive version of the coursebook). Readers are encouraged to only look at the solution after first solving the exercise themselves. Finally, each chapter will end with a set of additional exercises which will not have accompanying. It is recommended to successfully solve all these exercises, since the lessons that follow presume the well-accepted knowledge of all the topics that are discussed previously (and some exercises will sneakily introduce some helpful functions or tricks which may become very useful later on). Let’s get to know the concept of workbooks more closely. First, you need to download and open a workbook that matches the lesson you are reading. It is easy to recognize it by looking at the chapter number - the notebook for this chapter should be named 01_Introduction_WB.Rmd. It is recommended that all workbooks that you plan to use are copied somewhere to the local computer together with all the accompanying files, and then perhaps create a backup copy of the original workbook (since solving a workbook will change its contents). As stated previously, the workbook will typically contain all the program code in the chapter to which it refers, but usually only the minimal amount of text sufficient for easier understanding and solving the exercises. Workbooks will leverage two types of tasks: Examples and Exercises. Examples will be pieces of code that will just need to be executed, without any modification. Exercises on the other hand expect at least some changes, and often require entering completely new segments of program code. An Example might look like this: Example 1.1 - a few simple mathematical expressions 3 + 2 # adding log(10) # natural logarithm! log10(10) # this is a base-10 logarithm! By the way, we comment with the &quot;#&quot; sin(0.5 * pi) # pi is one of the built-in constants ## [1] 5 ## [1] 2.302585 ## [1] 1 ## [1] 1 You can execute the commands from the examples individually, or the entire chunk at once with the CTRL + SHIFT + ENTER key combination. No modification of the code is necessary (although you should always feel free to experiment further with the given commands, either in the chunk itself or in the console!). As stated, Exercises on the other hand always require a certain - even minimal - intervention. Exercise 1.1 - Commands for checking/changing the working directory # Make the following commands by removing the comment character #getwd() # current working directory #setwd(&quot;.&quot;) # here we can specify a new working folder if desired # usually not a good idea when working with RMD files getwd() # directory in which we are currently working setwd(&quot;.&quot;) # here we can specify a new working folder if desired # usually not a good idea when working with RMD files The exercise will often be related to the most recently introduced concept. For example, we might be learning the assignment operator, and explaining that although language R supports the usage of = operator for assigning a value to a variable, it is recommended to use the &lt;- operator for that purpose, for various reasons to be explained later (use ALT + - to quickly write &lt;-). Also, note that R supports the so-called autoprint functionality, when a command or a set of commands is executed, the value of the last expression will be shown on screen. This means that if we create a new variable x and want to print it on the screen, we do not have to put print(x)as the last command, but rather just x. Also, using an assignment operator does not return a value in itself, which is why we do not see anything printed out on screen after assigning a value to a variable. Let’s try to experiment with these concepts in the following exercise. Exercise 1.2 - Assignment operator # store `5` in a variable called `x` # then print the variable `x` on the screen x &lt;- 5 x ## [1] 5 Now that we have some basic knowledge about language R and the programming interface we will be using, we can begin by learning the basic elements of the R programming language. Programirajmo u R-u by Damir Pintar is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.Based on a work at https://ratnip.github.io/FER_OPJR/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
